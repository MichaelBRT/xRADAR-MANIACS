function [Tp,Xp,U] = generateTransfer(x0,xf,TOF,mu,options)
        %% Solving TPBVP using BVP4C
        % Generate initial adjoint variable guess
        p0 = 0.25 * randn(6,1);

        % Initial condition to Adjoint equations of motion
        S0 = [x0;p0];
        
        adjointEqns = @(t,x) optimalTransferV1(t,x,mu);

        [Tp, Xp] = ode45(@adjointEqns,[0,TOF],S0,options);

        for nit=1:1:20
             solinit.x = Tp;
             solinit.y = Xp';
             solOut    = bvp4c(@optimalTransferV1,@bcoptimalTransferV1,solinit); 
             Tp        = solOut.x;Tp=Tp(:);
             Xp        = solOut.y;Xp=Xp';
        end
        
        U(:,1)= -Xp(:,10);
        U(:,2)= -Xp(:,11);
        U(:,3)= -Xp(:,12);
end

function [Xdot]=optimalTransferV1(t,X,rho)
%% Adjoint Equations of Motion
% Adapted from Dr. Kolmanovsky's code

% States
x = X(1:6);  % [x, y, z, vx, vy, vz]

% Adjoint variables
p  = X(7:12); % adjoint variables

% Dynamics
r1 = norm([x(1) + rho, x(2), x(3)]);
r2 = norm([x(1) - 1 + rho, x(2), x(3)]);

Ux = x(1) - (1-rho)*(x(1)+rho)/r1^3 - rho*(x(1)-1+rho)/r2^3;
Uy = x(2) - (1-rho)*x(2)/r1^3 - rho*x(2)/r2^3;
Uz = -(1-rho)*x(3)/r1^3 - rho*x(3)/r2^3;

dxdt = [x(4);
    x(5);
    x(6);
    2*x(5) + Ux;
    -2*x(4) + Uy;
    Uz];

% Optimal control: u = -p(4:6)
u         = -p(4:6);
dxdt(4:6) = dxdt(4:6) + u;

dHdx = compute_dHdx(x,p, rho);
Xdot = [dxdt; -dHdx];
Xdot      = Xdot(:);
end
     
function bc = bcoptimalTransferV1(XA,XB,x0,xT)
% used with bvp4c
 
% initial conditions
bc(1:6) = x0(:) - XA(1:6);

% final conditions
bc(7:12) = XB(1:6)-xT(:);

end


function dHdx = compute_dHdx(x,p, rho)
x1=x(1);x2=x(2);x3=x(3);x4=x(4);x5=x(5);x6=x(6);
p1=p(1);p2=p(2);p3=p(3);p4=p(4);p5=p(5);p6=p(6);

dHdx =[(2*p4*rho - p4 - p4*x1 - 3*p5*x2 - 3*p6*x3 - p4*rho^2 + 2*p4*x1^2 - p4*x2^2 - p4*x3^2 + p4*((rho + x1 - 1)^2 + x2^2 + x3^2)^(5/2) + p4*rho*x1 + 3*p5*rho*x2 + 3*p6*rho*x3 + 3*p5*x1*x2 + 3*p6*x1*x3)/(((rho + x1 - 1)^2 + x2^2 + x3^2)^(1/2)*(rho^2 + 2*rho*x1 - 2*rho + x1^2 - 2*x1 + x2^2 + x3^2 + 1)^2);
       (2*p5*rho - p5 + 2*p5*x1 - p5*rho^2 - p5*x1^2 + 2*p5*x2^2 - p5*x3^2 + p5*((rho + x1 - 1)^2 + x2^2 + x3^2)^(5/2) - 2*p5*rho*x1 + 3*p4*x1*x2 + 3*p6*x2*x3)/(((rho + x1 - 1)^2 + x2^2 + x3^2)^(1/2)*(rho^2 + 2*rho*x1 - 2*rho + x1^2 - 2*x1 + x2^2 + x3^2 + 1)^2);
       -(p6*rho^2 + 2*p6*rho*x1 - 2*p6*rho + p6*x1^2 - 3*p4*x1*x3 - 2*p6*x1 + p6*x2^2 - 3*p5*x2*x3 - 2*p6*x3^2 + p6)/(((rho + x1 - 1)^2 + x2^2 + x3^2)^(1/2)*(rho^2 + 2*rho*x1 - 2*rho + x1^2 - 2*x1 + x2^2 + x3^2 + 1)^2);
        p1 - 2*p5;
        p2 + 2*p4;
        p3];

end